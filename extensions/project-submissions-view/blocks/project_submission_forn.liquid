{% assign avg_rating = block.settings.product.metafields.demo.avg_rating.value | round %}

<style>
.form-container {
  min-height: 100vh;
  background-color: #f9fafb;
  padding: 5rem 3rem;
}

.form-wrapper {
  max-width: 64rem;
  margin: 0 auto;
}

.progress-container {
  margin-bottom: 4rem;
}

.progress-bar {
  height: 1rem;
  background-color: #e5e7eb;
  border-radius: 9999px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background-color: #4f46e5;
  transition: width 0.5s ease;
}

.form-card {
  background-color: white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  border-radius: 1.5rem;
  padding: 3.5rem;
}

.step {
  display: none;
}

.step.active {
  display: block;
}

.step-title {
  font-size: 2.5rem;
  font-weight: bold;
  color: #111827;
  margin-bottom: 2rem;
}

.step-description {
  font-size: 1.75rem;
  line-height: 1.6;
  color: #4b5563;
  margin-bottom: 2.5rem;
}

.form-group {
  margin-bottom: 2.5rem;
}

.form-group.grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2.5rem;
}

.form-label {
  display: block;
  font-size: 1.75rem;
  font-weight: 500;
  color: #374151;
  margin-bottom: 1rem;
}

.form-input {
  display: block;
  width: 100%;
  padding: 1.5rem;
  font-size: 1.75rem;
  line-height: 1.6;
  border: 2px solid #d1d5db;
  border-radius: 0.75rem;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  transition: all 0.2s ease;
  min-height: 5rem;
}

.form-input:focus {
  border-color: var(--primary-color, #4f46e5);
  outline: none;
  box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb, 79, 70, 229), 0.1);
}

.button-group {
  display: flex;
  justify-content: space-between;
  margin-top: 3rem;
  gap: 1.5rem;
}

.button {
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
}

.button-primary {
  background-color: var(--primary-color, #4f46e5);
  color: white;
  padding: 1.25rem 2.5rem;
  font-size: 1.75rem;
  font-weight: 600;
  border-radius: 0.75rem;
  transition: all 0.2s ease;
}

.button-primary:hover {
  background-color: var(--primary-color-dark, #4338ca);
  transform: translateY(-1px);
}

.button-secondary {
  background-color: var(--secondary-color, #e5e7eb);
  color: var(--secondary-text-color, #374151);
  padding: 1.25rem 2.5rem;
  font-size: 1.75rem;
  font-weight: 600;
  border-radius: 0.75rem;
  transition: all 0.2s ease;
}

.button-secondary:hover {
  background-color: var(--secondary-color-dark, #d1d5db);
  transform: translateY(-1px);
}

.file-upload {
  min-height: 20rem;
  padding: 4rem;
  border: 4px dashed var(--primary-color, #4f46e5);
  border-radius: 1.5rem;
  background-color: rgba(var(--primary-color-rgb, 79, 70, 229), 0.05);
  transition: all 0.2s ease;
}

.file-upload:hover {
  background-color: rgba(var(--primary-color-rgb, 79, 70, 229), 0.1);
}

.file-upload-content {
  text-align: center;
}

.file-upload-icon {
  width: 6rem;
  height: 6rem;
  margin-bottom: 2rem;
}

.file-upload-text {
  font-size: 2rem;
  margin-bottom: 1.5rem;
}

.file-upload-label {
  color: #4f46e5;
  font-weight: 500;
  cursor: pointer;
}

.file-upload-label:hover {
  color: #4338ca;
}

.file-upload-input {
  display: none;
}

.file-upload-hint {
  font-size: 1.5rem;
}

.image-preview-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  gap: 10px;
  margin-top: 20px;
}

.image-preview {
  position: relative;
  aspect-ratio: 1;
  border-radius: 8px;
  overflow: hidden;
  border: 2px solid #e5e7eb;
}

.image-preview img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.image-preview button {
  position: absolute;
  top: 5px;
  right: 5px;
  background: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
}

.file-upload.dragover {
  background-color: rgba(79, 70, 229, 0.1);
}

.file-upload-content {
  text-align: center;
}

.file-upload-icon {
  width: 6rem;
  height: 6rem;
  margin-bottom: 2rem;
}

.file-upload-text {
  font-size: 2rem;
  margin-bottom: 1.5rem;
}

.file-upload-label {
  color: #4f46e5;
  font-weight: 500;
  cursor: pointer;
}

.file-upload-label:hover {
  color: #4338ca;
}

.file-upload-input {
  display: none;
}

.file-upload-hint {
  font-size: 1.5rem;
}

.product-results {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-top: 10px;
}

.product-item {
  padding: 10px;
  border-bottom: 1px solid #eee;
  cursor: pointer;
}

.product-item:hover {
  background-color: #f5f5f5;
}

.variant-option {
  margin-bottom: 10px;
}

.variant-option label {
  font-size: 1.75rem;
  margin-bottom: 1rem;
}

.variant-option select {
  font-size: 1.75rem;
  padding: 1.25rem;
  border-radius: 0.75rem;
}

.error-message {
  font-size: 1.75rem;
  padding: 1.5rem;
  background-color: #fee2e2;
  border-radius: 0.75rem;
  margin-top: 1.5rem;
}

.product-title {
  font-size: 1.75rem;
  font-weight: 600;
  margin-bottom: 0.75rem;
}

.product-price {
  font-size: 1.5rem;
  color: #4b5563;
}

.product-title a {
  color: inherit;
  text-decoration: none;
}

.product-title a:hover {
  text-decoration: underline;
}

.error-message small {
  font-size: 1.5rem;
  margin-top: 1rem;
}

/* Larger Text Areas */
textarea.form-input {
  min-height: 12rem;
  font-size: 1.75rem;
  line-height: 1.6;
  resize: vertical;
}

/* Larger Select Boxes */
select.form-input {
  font-size: 1.75rem;
  padding: 1.5rem 3.5rem 1.5rem 1.5rem;
  background-size: 2.5rem;
  background-position: right 1.5rem center;
}

/* Loading Spinner */
.loading-spinner {
  width: 5rem;
  height: 5rem;
  border-width: 5px;
}

/* Product Search Input */
#product-search {
  font-size: 1.75rem;
  padding: 1.5rem;
  border-radius: 1rem;
}

/* Progress Bar */
.progress-container {
  margin-bottom: 4rem;
}

.progress-bar {
  height: 1rem;
  background-color: #e5e7eb;
  border-radius: 9999px;
  overflow: hidden;
}

/* Form Container */
.form-container {
  min-height: 100vh;
  background-color: #f9fafb;
  padding: 5rem 3rem;
}

.form-wrapper {
  max-width: 64rem;
  margin: 0 auto;
}

.form-card {
  background-color: white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  border-radius: 1.5rem;
  padding: 3.5rem;
}

/* Form Groups */
.form-group {
  margin-bottom: 2.5rem;
}

.form-group.grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2.5rem;
}

/* Button Groups */
.button-group {
  display: flex;
  justify-content: space-between;
  margin-top: 3rem;
  gap: 1.5rem;
}

/* File Upload Area */
.file-upload {
  min-height: 20rem;
  padding: 4rem;
  border: 4px dashed var(--primary-color, #4f46e5);
  border-radius: 1.5rem;
  background-color: rgba(var(--primary-color-rgb, 79, 70, 229), 0.05);
  transition: all 0.2s ease;
}

.file-upload-icon {
  width: 6rem;
  height: 6rem;
  margin-bottom: 2rem;
}

/* Product Search Section */
.product-search-container {
  position: relative;
  margin-bottom: 2.5rem;
}

.product-search-input {
  position: relative;
  width: 100%;
}

.product-search-input input {
  width: 100%;
  padding: 1.5rem 1.5rem 1.5rem 4.5rem;
  font-size: 1.75rem;
  border: 2px solid #d1d5db;
  border-radius: 1rem;
  background-color: white;
  transition: all 0.2s ease;
}

.product-search-input input:focus {
  border-color: var(--primary-color, #4f46e5);
  box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb, 79, 70, 229), 0.1);
  outline: none;
}

.product-search-icon {
  position: absolute;
  right: 1.5rem;
  top: 50%;
  transform: translateY(-50%);
  width: 2.5rem;
  height: 2.5rem;
  color: #6b7280;
  pointer-events: none;
}

.product-results {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  max-height: 500px;
  overflow-y: auto;
  background: white;
  border-radius: 1rem;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  margin-top: 0.5rem;
  z-index: 10;
}

.product-item {
  display: flex;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid #e5e7eb;
  cursor: pointer;
  transition: all 0.2s ease;
}

.product-item:last-child {
  border-bottom: none;
}

.product-item:hover {
  background-color: #f9fafb;
}

.product-image {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 0.5rem;
  margin-right: 1.5rem;
}

.product-details {
  flex: 1;
  min-width: 0;
}

.product-title {
  font-size: 1.75rem;
  font-weight: 600;
  color: #111827;
  margin-bottom: 0.5rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.product-price {
  font-size: 1.5rem;
  color: #4b5563;
}

.product-variants {
  font-size: 1.25rem;
  color: #6b7280;
  margin-top: 0.5rem;
}

.loading-spinner {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 2rem;
}

.loading-spinner::after {
  content: "";
  width: 3rem;
  height: 3rem;
  border: 4px solid #e5e7eb;
  border-top-color: var(--primary-color, #4f46e5);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.no-results {
  padding: 2rem;
  text-align: center;
  color: #6b7280;
  font-size: 1.5rem;
}

/* Variant Selection */
.variant-selection {
  background: white;
  border-radius: 1rem;
  padding: 2rem;
  margin-top: 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.variant-option {
  margin-bottom: 1.5rem;
}

.variant-option:last-child {
  margin-bottom: 0;
}

.variant-option label {
  display: block;
  font-size: 1.75rem;
  font-weight: 500;
  color: #374151;
  margin-bottom: 1rem;
}

.variant-option select {
  width: 100%;
  padding: 1.25rem;
  font-size: 1.75rem;
  border: 2px solid #d1d5db;
  border-radius: 0.75rem;
  background-color: white;
  cursor: pointer;
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236B7280'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 1.5rem center;
  background-size: 2rem;
  padding-right: 3.5rem;
}

.variant-option select:focus {
  border-color: var(--primary-color, #4f46e5);
  box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb, 79, 70, 229), 0.1);
  outline: none;
}

.selected-product {
  background: #f9fafb;
  border-radius: 1rem;
  padding: 2rem;
  margin-top: 2rem;
  display: flex;
  align-items: center;
}

.selected-product-image {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 0.5rem;
  margin-right: 2rem;
}

.selected-product-details {
  flex: 1;
}

.selected-product-title {
  font-size: 1.75rem;
  font-weight: 600;
  color: #111827;
  margin-bottom: 0.5rem;
}

.selected-product-variant {
  font-size: 1.5rem;
  color: #4b5563;
}

.error {
  border-color: #ef4444 !important;
  box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.1) !important;
}

.error-message {
  color: #ef4444;
  font-size: 1.5rem;
  margin-bottom: 2rem;
  padding: 1rem;
  background-color: #fee2e2;
  border-radius: 0.5rem;
}

.success-message {
  text-align: center;
  padding: 4rem 2rem;
}

.success-message h2 {
  font-size: 2.5rem;
  color: #10b981;
  margin-bottom: 1.5rem;
}

.success-message p {
  font-size: 1.75rem;
  color: #4b5563;
}
.tags-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 1.5rem;
  margin-top: 1rem;
  padding: 1.5rem;
  background-color: #f9fafb;
  border-radius: 0.75rem;
  border: 2px solid #e5e7eb;
}

.tag-item {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.tag-item input[type="checkbox"] {
  width: 2rem;
  height: 2rem;
  border: 2px solid #d1d5db;
  border-radius: 0.5rem;
  cursor: pointer;
  accent-color: var(--primary-color, #4f46e5);
}

.tag-item label {
  font-size: 1.6rem;
  color: #374151;
  cursor: pointer;
  user-select: none;
}

.tag-item:hover label {
  color: var(--primary-color, #4f46e5);
}
</style>

<div class="form-container">
  <div class="form-wrapper">
    <!-- Progress Bar -->
    <div class="progress-container">
      <div class="progress-bar">
        <div class="progress-fill" style="width: 0%"></div>
      </div>
    </div>

    <!-- Form Steps -->
    <div class="form-card">
      <!-- Step 1 -->
      <div class="step active" data-step="1">
        <h2 class="step-title">Step 1: We want to see your project!</h2>
        <p class="step-description">Show off your knit or crochet project using Bad Sheep Yarn. We would love to share your work on our website, social media, newsletter and more! Just upload images of your project and answer some quick questions.</p>
        <div class="button-group">
          <div></div>
          <button class="button button-primary next-step">Next</button>
        </div>
      </div>

      <!-- Step 2 -->
      <div class="step" data-step="2">
        <h2 class="step-title">Step 2: Your Name</h2>
        <p class="step-description">This info will not be shared unless you would like us to credit you in the photo</p>
        <div class="form-group grid">
          <div>
            <label class="form-label">First Name*</label>
            <input type="text" required class="form-input">
          </div>
          <div>
            <label class="form-label">Last Name*</label>
            <input type="text" required class="form-input">
          </div>
        </div>
        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary next-step">Next</button>
        </div>
      </div>

      <!-- Step 3 -->
      <div class="step" data-step="3">
        <h2 class="step-title">Step 3: Contact Information</h2>
        <p class="step-description">Your email will not be shared, we only need it in case we need to contact you directly regarding your submission.</p>
        <div class="form-group">
          <label class="form-label">Email*</label>
          <input type="email" required class="form-input">
        </div>
        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary next-step">Next</button>
        </div>
      </div>

      <!-- Step 4 -->
      <div class="step" data-step="4">
        <h2 class="step-title">Step 4: Project Details</h2>
        <div class="form-group">
          <label class="form-label">Project Name*</label>
          <input type="text" required class="form-input">
        </div>
        <div class="form-group">
          <label class="form-label">Pattern Name</label>
          <input type="text" class="form-input">
        </div>
        <div class="form-group">
          <label class="form-label">Designer Name</label>
          <input type="text" class="form-input">
        </div>
           <div class="form-group">
          <label class="form-label">Select project categories that apply*</label>
          <div class="tags-container">
            <div class="tag-item">
              <input type="checkbox" id="tag-socks" name="tags" value="Socks">
              <label for="tag-socks">Socks</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-headware" name="tags" value="Headware">
              <label for="tag-headware">Headware</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-shawls" name="tags" value="Shawls">
              <label for="tag-shawls">Shawls</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-cowls" name="tags" value="Cowls">
              <label for="tag-cowls">Cowls</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-blankets" name="tags" value="Blankets">
              <label for="tag-blankets">Blankets</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-sweaters" name="tags" value="Sweaters">
              <label for="tag-sweaters">Sweaters</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-mittens" name="tags" value="Mittens & Gloves">
              <label for="tag-mittens">Mittens & Gloves</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-tops" name="tags" value="Tops">
              <label for="tag-tops">Tops</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-babies" name="tags" value="Babies">
              <label for="tag-babies">Babies</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-scarves" name="tags" value="Scarves">
              <label for="tag-scarves">Scarves</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-ponchos" name="tags" value="Ponchos">
              <label for="tag-ponchos">Ponchos</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-vests" name="tags" value="Vests">
              <label for="tag-vests">Vests</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-wip" name="tags" value="WIP">
              <label for="tag-wip">WIP</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-toys" name="tags" value="Toys">
              <label for="tag-toys">Toys</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-decor" name="tags" value="Decor">
              <label for="tag-decor">Decor</label>
            </div>
            <div class="tag-item">
              <input type="checkbox" id="tag-wraps" name="tags" value="Wraps">
              <label for="tag-wraps">Wraps</label>
            </div>
          </div>
        </div>
        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary next-step">Next</button>
        </div>
     
      </div>

      <!-- Step 5 -->
      <div class="step" data-step="5">
        <h2 class="step-title">Step 5: Pattern Link</h2>
        <div class="form-group">
          <label class="form-label">Pattern Link</label>
          <input type="url" class="form-input">
        </div>
        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary next-step">Next</button>
        </div>
      </div>

      <!-- Step 6 -->
      <div class="step" data-step="6">
        <h2 class="step-title">Step 6: Select Product</h2>
        <p class="step-description">Search for the Bad Sheep Yarn product you used in your project. You can search by product name, color, or type.</p>
        
        <div class="product-search-container">
          <div class="product-search-input">
            <svg class="product-search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            <input 
              type="text" 
              id="product-search" 
              placeholder="Search for products..."
              oninput="searchProducts(this.value)"
            >
          </div>
          <div id="product-results" class="product-results"></div>
        </div>

        <div id="selected-product-display" class="selected-product" style="display: none;">
          <img id="selected-product-image" class="selected-product-image" src="" alt="" width="100" height="100">
          <div class="selected-product-details">
            <div id="selected-product-title" class="selected-product-title"></div>
            <div id="selected-product-variant" class="selected-product-variant"></div>
          </div>
        </div>

        <div id="variant-selection" class="variant-selection" style="display: none;">
          <h3 class="step-title" style="font-size: 2rem; margin-bottom: 1.5rem;">Select Variant</h3>
          <div id="variant-options"></div>
        </div>

        <input type="hidden" id="selected-product-id" name="product_id">
        <input type="hidden" id="selected-variant-id" name="variant_id">

        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary next-step">Next</button>
        </div>
      </div>

      <!-- Step 7 -->
      <div class="step" data-step="7">
        <h2 class="step-title">Step 7: Name Display</h2>
        <div class="form-group">
          <label class="form-label">How would you like us to display your name?*</label>
          <select required class="form-input">
            <option value="full">Full Name</option>
            <option value="first">First Name Only</option>
            <option value="initials">Initials</option>
            <option value="anonymous">Anonymous</option>
          </select>
        </div>
        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary next-step">Next</button>
        </div>
      </div>

      <!-- Step 8 -->
      <div class="step" data-step="8">
        <h2 class="step-title">Step 8: Social Media</h2>
        <div class="form-group">
          <label class="form-label">Social Media Handle</label>
          <input type="text" class="form-input" placeholder="@username">
        </div>
        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary next-step">Next</button>
        </div>
      </div>

      <!-- Step 9 -->
      <div class="step" data-step="9">
        <h2 class="step-title">Step 9: Project Images</h2>
        <div class="form-group">
          <label class="form-label">Upload Project Images*</label>
          <div class="file-upload">
            <div class="file-upload-content">
              <svg class="file-upload-icon" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              <div class="file-upload-text">
                <label for="file-upload" class="file-upload-label">
                  <span>Upload files</span>
                  <input id="file-upload" name="file-upload" type="file" class="file-upload-input" multiple>
                </label>
                <p>or drag and drop</p>
              </div>
              <p class="file-upload-hint">PNG, JPG, GIF up to 10MB</p>
            </div>
          </div>
        </div>
        <div class="button-group">
          <button class="button button-secondary prev-step">Previous</button>
          <button class="button button-primary submit">Submit</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let selectedProduct = null;
let selectedVariants = {};
let isLoading = false;
let storeDomain = window.Shopify.shop;
console.log(storeDomain);
let API_PATH = 'https://badsheepyarn-gallery-app.vercel.app';


function searchProducts(query) {
  if (!query) {
    document.getElementById('product-results').innerHTML = '';
    return;
  }

  isLoading = true;
  const resultsContainer = document.getElementById('product-results');
  resultsContainer.innerHTML = '<div class="loading-spinner"></div>';

  fetch(`${API_PATH}/api/products/?query=${encodeURIComponent(query)}&store=${storeDomain}`)
    .then(response => response.json())
    .then(data => {
      if (data.error) {
        throw new Error(data.error);
      }

      const { products, domain } = data;
      storeDomain = domain;

      if (products.length === 0) {
        resultsContainer.innerHTML = '<div class="no-results">No products found</div>';
        return;
      }

      resultsContainer.innerHTML = products.map(product => `
        <div class="product-item" data-product='${JSON.stringify(product)}'>
          <img src="${product.image}" alt="${product.title}" class="product-image" width="80" height="80">
          <div class="product-details">
            <div class="product-title">
              <a href="https://${domain}/products/${product.handle}" target="_blank">
                ${product.title}
              </a>
            </div>
            <div class="product-price">
              ${product.price}
            </div>
            {% comment %} <div class="product-options">
              ${product.options.map(option => `
                <div class="variant-option">
                  <label>${option.name}</label>
                  <select onchange="updateOptionSelection('${option.name}', this.value)">
                    <option value="">Select ${option.name}</option>
                    ${option.values.map(value => `
                      <option value="${value}">${value}</option>
                    `).join('')}
                  </select>
                </div>
              `).join('')}
            </div> {% endcomment %}
          </div>
        </div>
      `).join('');

      // Add click handlers
      document.querySelectorAll('.product-item').forEach(item => {
        item.addEventListener('click', () => {
          const product = JSON.parse(item.dataset.product);
          selectProduct(product);
        });
      });
    })
    .catch(error => {
      console.error('Error searching products:', error);
      resultsContainer.innerHTML = `
        <div class="error-message">
          Error searching products: ${error.message}
          <small>Please try again later</small>
        </div>
      `;
    })
    .finally(() => {
      isLoading = false;
    });
}

function selectProduct(product) {
  selectedProduct = product;
  selectedVariants = {};

  // Show the selected product display
  const selectedContainer = document.getElementById('selected-product-display');
  selectedContainer.style.display = 'flex';
  
  // Update the selected product image
  const productImage = document.getElementById('selected-product-image');
  productImage.src = product.image;
  productImage.alt = product.title;
  productImage.width = 100;
  productImage.height = 100;

  // Update the selected product title
  document.getElementById('selected-product-title').textContent = product.title;

  // Create option selects
  const variantOptions = document.getElementById('variant-options');
  variantOptions.innerHTML = product.options.map(option => `
    <div class="variant-option">
      <label>${option.name}</label>
      <select onchange="updateOptionSelection('${option.name}', this.value)">
        <option value="">Select ${option.name}</option>
        ${option.values.map(value => `
          <option value="${value}">${value}</option>
        `).join('')}
      </select>
    </div>
  `).join('');

  // Show the variant selection section
  document.getElementById('variant-selection').style.display = 'block';

  // Clear the search results
  document.getElementById('product-results').innerHTML = '';
  document.getElementById('product-search').value = '';
}

function updateOptionSelection(optionName, value) {
  selectedVariants[optionName] = value;
  
  // Update the selected variant display
  const variantDisplay = document.getElementById('selected-product-variant');
  const selectedOptions = Object.entries(selectedVariants)
    .map(([name, value]) => `${name}: ${value}`)
    .join(', ');
  variantDisplay.textContent = selectedOptions;

  // Check if all options are selected
  const allOptionsSelected = Object.keys(selectedVariants).length === selectedProduct.options.length;
  if (allOptionsSelected) {
    // Enable the next button if all options are selected
    const nextButton = document.querySelector(`.step[data-step="6"] .next-step`);
    nextButton.disabled = false;
  }
}

let uploadedImages = [];
let dragCounter = 0;
let uploadedImageUrls = [];

function handleFiles(files) {
  const fileUploadHint = document.querySelector('.file-upload-hint');
  const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
  const maxSize = 10 * 1024 * 1024; // 10MB
  let validFiles = [];

  // Create preview container if it doesn't exist
  let previewContainer = document.querySelector('.image-preview-container');
  if (!previewContainer) {
    previewContainer = document.createElement('div');
    previewContainer.className = 'image-preview-container';
    document.querySelector('.file-upload').insertAdjacentElement('afterend', previewContainer);
  }

  Array.from(files).forEach(file => {
    if (!validTypes.includes(file.type)) {
      fileUploadHint.textContent = 'Invalid file type. Only PNG, JPG, GIF allowed.';
      fileUploadHint.style.color = '#ef4444';
      return;
    }
    if (file.size > maxSize) {
      fileUploadHint.textContent = 'File too large. Maximum size is 10MB.';
      fileUploadHint.style.color = '#ef4444';
      return;
    }
    validFiles.push(file);

    // Create preview
    const reader = new FileReader();
    reader.onload = (e) => {
      const preview = document.createElement('div');
      preview.className = 'image-preview';
      
      const img = document.createElement('img');
      img.src = e.target.result;
      
      const removeBtn = document.createElement('button');
      removeBtn.innerHTML = '×';
      removeBtn.onclick = () => {
        uploadedImages = uploadedImages.filter(img => img !== file);
        preview.remove();
        updateFileUploadHint();
      };

      preview.appendChild(img);
      preview.appendChild(removeBtn);
      previewContainer.appendChild(preview);
    };
    reader.readAsDataURL(file);
  });

  uploadedImages = [...uploadedImages, ...validFiles];
  updateFileUploadHint();
}

function updateFileUploadHint() {
  const fileUploadHint = document.querySelector('.file-upload-hint');
  if (uploadedImages.length > 0) {
    fileUploadHint.textContent = `${uploadedImages.length} file(s) selected`;
    fileUploadHint.style.color = '#10b981';
  } else {
    fileUploadHint.textContent = 'PNG, JPG, GIF up to 10MB';
    fileUploadHint.style.color = '';
  }
}

document.addEventListener('DOMContentLoaded', function() {
  const steps = document.querySelectorAll('.step');
  const progressBar = document.querySelector('.progress-fill');
  let currentStep = 1;

  function updateProgress() {
    const progress = ((currentStep - 1) / (steps.length - 1)) * 100;
    progressBar.style.width = `${progress}%`;
  }

  function validateCurrentStep() {
    const currentStepElement = steps[currentStep - 1];
    const requiredFields = currentStepElement.querySelectorAll('[required]');
    let isValid = true;
    let firstInvalidField = null;

    // Check required fields
    requiredFields.forEach(field => {
      if (!field.value.trim()) {
        isValid = false;
        if (!firstInvalidField) firstInvalidField = field;
        field.classList.add('error');
      } else {
        field.classList.remove('error');
      }
    });

    // Special validation for email field
    const emailField = currentStepElement.querySelector('input[type="email"]');
    if (emailField && emailField.value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(emailField.value)) {
        isValid = false;
        if (!firstInvalidField) firstInvalidField = emailField;
        emailField.classList.add('error');
      }
    }

    // Special validation for product selection in step 6
    if (currentStep === 6 && !selectedProduct) {
      isValid = false;
      const productSearch = document.getElementById('product-search');
      if (!firstInvalidField) firstInvalidField = productSearch;
      productSearch.classList.add('error');
    }

    // Special validation for file upload in step 9
    if (currentStep === 9) {
      const fileInput = document.getElementById('file-upload');
      if (fileInput && fileInput.files.length === 0) {
        isValid = false;
        const fileUpload = document.querySelector('.file-upload');
        fileUpload.classList.add('error');
        if (!firstInvalidField) firstInvalidField = fileInput;
      }
    }

    if (!isValid && firstInvalidField) {
      firstInvalidField.focus();
      // Show error message
      const errorMessage = document.createElement('div');
      errorMessage.className = 'error-message';
      errorMessage.textContent = 'Please fill in all required fields correctly.';
      const existingError = currentStepElement.querySelector('.error-message');
      if (existingError) {
        existingError.remove();
      }
      currentStepElement.insertBefore(errorMessage, currentStepElement.firstChild);
      return false;
    }

    return true;
  }

  function showStep(stepNumber) {
    steps.forEach(step => {
      step.classList.remove('active');
    });
    steps[stepNumber - 1].classList.add('active');
    currentStep = stepNumber;
    updateProgress();
  }

  document.querySelectorAll('.next-step').forEach(button => {
    button.addEventListener('click', () => {
      if (currentStep < steps.length && validateCurrentStep()) {
        showStep(currentStep + 1);
      }
    });
  });

  document.querySelectorAll('.prev-step').forEach(button => {
    button.addEventListener('click', () => {
      if (currentStep > 1) {
        showStep(currentStep - 1);
      }
    });
  });

  // Initialize first step
  showStep(1);

  // Add input validation listeners
  const inputs = document.querySelectorAll('input, select');
  inputs.forEach(input => {
    input.addEventListener('input', function() {
      console.log('Input changed:', this.type, this.value);
      this.classList.remove('error');
      const errorMessage = this.closest('.step').querySelector('.error-message');
      if (errorMessage) {
        errorMessage.remove();
      }
    });
  });

  // Add file input validation
  const fileInput = document.getElementById('file-upload');
  if (fileInput) {
    fileInput.addEventListener('change', function() {
      const fileUpload = document.querySelector('.file-upload');
      fileUpload.classList.remove('error');
      const errorMessage = fileUpload.closest('.step').querySelector('.error-message');
      if (errorMessage) {
        errorMessage.remove();
      }
    });
  }

  // Add dynamic color functionality
  function setThemeColors(primaryColor, secondaryColor) {
    // Convert hex to RGB
    function hexToRgb(hex) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }

    // Set primary color
    document.documentElement.style.setProperty('--primary-color', primaryColor);
    const primaryRgb = hexToRgb(primaryColor);
    document.documentElement.style.setProperty('--primary-color-rgb', `${primaryRgb.r}, ${primaryRgb.g}, ${primaryRgb.b}`);
    
    // Calculate darker shade for hover
    const primaryDark = shadeColor(primaryColor, -20);
    document.documentElement.style.setProperty('--primary-color-dark', primaryDark);

    // Set secondary color
    document.documentElement.style.setProperty('--secondary-color', secondaryColor);
    const secondaryRgb = hexToRgb(secondaryColor);
    document.documentElement.style.setProperty('--secondary-color-rgb', `${secondaryRgb.r}, ${secondaryRgb.g}, ${secondaryRgb.b}`);
    
    // Calculate darker shade for hover
    const secondaryDark = shadeColor(secondaryColor, -20);
    document.documentElement.style.setProperty('--secondary-color-dark', secondaryDark);
  }

  // Helper function to lighten/darken colors
  function shadeColor(color, percent) {
    let R = parseInt(color.substring(1,3),16);
    let G = parseInt(color.substring(3,5),16);
    let B = parseInt(color.substring(5,7),16);

    R = parseInt(R * (100 + percent) / 100);
    G = parseInt(G * (100 + percent) / 100);
    B = parseInt(B * (100 + percent) / 100);

    R = (R<255)?R:255;  
    G = (G<255)?G:255;  
    B = (B<255)?B:255;  

    R = Math.max(0,R).toString(16).padStart(2, '0');
    G = Math.max(0,G).toString(16).padStart(2, '0');
    B = Math.max(0,B).toString(16).padStart(2, '0');

    return `#${R}${G}${B}`;
  }

  // Initialize theme colors from settings
  const primaryColor = '{{ block.settings.primary_color | default: "#4f46e5" }}';
  const secondaryColor = '{{ block.settings.secondary_color | default: "#e5e7eb" }}';
  setThemeColors(primaryColor, secondaryColor);

  // Add drag and drop handlers
  const fileUpload = document.querySelector('.file-upload');

  fileUpload.addEventListener('dragenter', (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter++;
    fileUpload.style.backgroundColor = 'rgba(79, 70, 229, 0.1)';
  });

  fileUpload.addEventListener('dragleave', (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter--;
    if (dragCounter === 0) {
      fileUpload.style.backgroundColor = '';
    }
  });

  fileUpload.addEventListener('dragover', (e) => {
    e.preventDefault();
    e.stopPropagation();
  });

  fileUpload.addEventListener('drop', (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter = 0;
    fileUpload.style.backgroundColor = '';
    
    const dt = e.dataTransfer;
    const files = dt.files;
    handleFiles(files);
  });

  // Add file input change handler
  document.getElementById('file-upload').addEventListener('change', (e) => {
    handleFiles(e.target.files);
  });

  // Add form submission handler
  const form = document.querySelector('.form-card');
  const submitButton = form.querySelector('.submit');
  if (submitButton) {
    submitButton.addEventListener('click', handleSubmit);
  }

  // Add product option change validation
  document.addEventListener('change', function(e) {
    if (e.target.matches('.variant-option select')) {
      console.log('Option changed:', e.target.name, e.target.value);
      const variantSelection = document.getElementById('variant-selection');
      variantSelection.classList.remove('error');
      const errorMessage = variantSelection.closest('.step').querySelector('.error-message');
      if (errorMessage) {
        errorMessage.remove();
      }
    }
  });
});

// Form validation function
function validateForm() {
  console.log('Starting form validation...');
  const requiredFields = document.querySelectorAll('[required]');
  console.log('Required fields found:', requiredFields.length, requiredFields);
  
  let isValid = true;
  let missingFields = [];

  // Exclude email and product options from the loop
  const fieldsToExclude = ['email', 'productOptions'];
  const fieldsToCheck = Array.from(requiredFields).filter(field => {
    const fieldName = field.getAttribute('name') || field.getAttribute('id') || '';
    return !fieldsToExclude.includes(fieldName);
  });
  console.log('Fields to check:', fieldsToCheck);

  // Check required fields (excluding email and product options)
  {% comment %} fieldsToCheck.forEach(field => {
    console.log('Checking field:', field.type, field.value);
    if (!field.value.trim()) {
      console.log('Field is empty:', field.type);
      isValid = false;
      field.classList.add('error');
      const label = field.previousElementSibling?.textContent || field.getAttribute('placeholder') || 'This field';
      missingFields.push(label.replace('*', '').trim());
    } else {
      field.classList.remove('error');
    }
  }); {% endcomment %}

  // Validate email format separately
  const emailField = document.querySelector('input[type="email"][required]');
  if (emailField) {
    const emailValue = emailField.value.trim();
    if (!emailValue) {
      console.log('Email is empty');
      isValid = false;
      emailField.classList.add('error');
      missingFields.push('Email');
    } else {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(emailValue)) {
        console.log('Email format is invalid');
        isValid = false;
        emailField.classList.add('error');
        missingFields.push('Email (invalid format)');
      } else {
        console.log('Email is valid');
        emailField.classList.remove('error');
      }
    }
  }

  // Validate product selection and options separately
  if (!selectedProduct) {
    console.log('No product selected');
    isValid = false;
    const productSearch = document.getElementById('product-search');
    productSearch.classList.add('error');
    missingFields.push('Product selection');
  }
  {% comment %} } else if (Object.keys(selectedVariants).length !== selectedProduct.options.length) {
    console.log('Not all options are selected');
    isValid = false;
    const variantSelection = document.getElementById('variant-selection');
    variantSelection.classList.add('error');
    missingFields.push('Product options');
  } {% endcomment %}

  console.log('Missing fields:', missingFields);
  console.log('Form is valid:', isValid);

  // Show error message with missing fields
  if (!isValid) {
    console.log('Showing error message');
    const errorMessage = document.createElement('div');
    errorMessage.className = 'error-message';
    errorMessage.innerHTML = `
      <p>Please fill in the following required fields:</p>
      <ul style="margin-top: 1rem; padding-left: 2rem;">
        ${missingFields.map(field => `<li>${field}</li>`).join('')}
      </ul>
    `;

    // Remove any existing error message
    const existingError = document.querySelector('.error-message');
    if (existingError) {
      existingError.remove();
    }

    // Add new error message at the top of the form
    const formCard = document.querySelector('.form-card');
    formCard.insertBefore(errorMessage, formCard.firstChild);

    // Scroll to the first error
    const firstErrorField = document.querySelector('.error');
    if (firstErrorField) {
      firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }

  return isValid;
}

// Prepare form data for API submission
function prepareFormData(images) {
  console.log(`Preparing form data...`,
    `Selected product: ${selectedProduct ? selectedProduct.title : 'None'}`,
    `Selected variants: ${JSON.stringify(selectedVariants)}`,
    `Uploaded images: ${images.length}`
  );
  // Get all form fields
  const formFields = document.querySelectorAll('.form-input');
  
  // Create form data object matching the required format
  const formData = {
    firstName: formFields[0].value, // First name input
    lastName: formFields[1].value,  // Last name input
    email: formFields[2].value,     // Email input
    projectName: formFields[3].value, // Project name input
    patternName: formFields[4].value, // Pattern name input
    designerName: formFields[5].value, // Designer name input
    patternLink: formFields[6].value,  // Pattern link input
    shop:storeDomain,
    product: {
      shopifyId: selectedProduct.id,
      title: selectedProduct.title,
      handle: selectedProduct.handle,
      options: selectedVariants,
      imageUrl: selectedProduct.image,
      price: selectedProduct.price
    },
    nameDisplay: document.querySelector('select[required]').value,
    socialMedia: formFields[7].value, // Social media handle input
    images: images
  };

  return formData;
}

// Handle form submission
async function uploadImages() {
  const uploadPromises = uploadedImages.map(async (file) => {
    const formData = new FormData();
    formData.append('img', file);

    try {
      const response = await fetch(`${API_PATH}/api/upload`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Upload failed');
      }

      const result = await response.json();
      if (result.success && result.data.imageUrl) {
        return result.data.imageUrl;
      }
      throw new Error('Invalid response format');
    } catch (error) {
      console.error('Image upload error:', error);
      throw error;
    }
  });

  try {
    uploadedImageUrls = await Promise.all(uploadPromises);
    return uploadedImageUrls;
  } catch (error) {
    throw new Error('Failed to upload one or more images');
  }
}

async function handleSubmit(event) {
  if (uploadedImages.length === 0) {
    const fileUploadHint = document.querySelector('.file-upload-hint');
    fileUploadHint.textContent = 'Please upload at least one image';
    fileUploadHint.style.color = '#ef4444';
    return;
  }
  event.preventDefault();
  console.log(validateForm());
  
  if (!validateForm()) {
    return;
  }
  console.log('validateForm', validateForm());

  try {
    const imageUrls = await uploadImages();
    console.log('Upload successful:', imageUrls);
  } catch (error) {
    console.error('Upload error:', error);
    const fileUploadHint = document.querySelector('.file-upload-hint');
    fileUploadHint.textContent = 'Failed to upload images. Please try again.';
    fileUploadHint.style.color = '#ef4444';
    return;
  }
  const images = uploadedImageUrls.map(url => ({
    url: url,
    alt: `${url.split('/').pop()}`
  }));

  const formData = prepareFormData(images);
  
  // Get the submit button correctly
  const submitButton = event.target.closest('.button-group').querySelector('.submit');
  if (submitButton) {
    submitButton.disabled = true;
    submitButton.textContent = 'Submitting...';
  }

  try {
    const response = await fetch(`${API_PATH}/api/submissions`, {
      method: 'POST',
      body: JSON.stringify(formData)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to submit form');
    }

    const result = await response.json();

    // Show success message
    const formCard = document.querySelector('.form-card');
    formCard.innerHTML = `
      <div class="success-message">
        <h2>Thank You!</h2>
        <p>Your submission has been received. We'll review it and get back to you soon.</p>
      </div>
    `;
  } catch (error) {
    console.error('Submission error:', error);
    const errorMessage = document.createElement('div');
    errorMessage.className = 'error-message';
    errorMessage.textContent = `Error submitting form: ${error.message}`;
    document.querySelector('.form-card').prepend(errorMessage);
    if (submitButton) {
      submitButton.disabled = false;
      submitButton.textContent = 'Submit';
    }
  }
}
</script>

{% schema %}
{
  "name": "Project Submission Form",
  "target": "section",
  "settings": [
    {
      "type": "color",
      "id": "primary_color",
      "label": "Primary Color",
      "default": "#4f46e5"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Secondary Color",
      "default": "#e5e7eb"
    }
  ]
}
{% endschema %}

