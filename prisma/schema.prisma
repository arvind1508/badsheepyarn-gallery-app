generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime? @db.Timestamp(6)
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Customer {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  phone     String?
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  projects  Project[]
}

model Project {
  id          String         @id @default(uuid())
  title       String
  description String
  status      ProjectStatus  @default(PENDING)
  customerId  String
  adminNotes  String?
  createdAt   DateTime       @default(now()) @db.Timestamp(6)
  updatedAt   DateTime       @updatedAt @db.Timestamp(6)
  approvedAt  DateTime?      @db.Timestamp(6)
  rejectedAt  DateTime?      @db.Timestamp(6)
  approvedBy  String?
  shop        String?
  customer    Customer       @relation(fields: [customerId], references: [id])
  images      ProjectImage[]
}

model ProjectImage {
  id           String             @id @default(cuid())
  url          String
  filename     String
  size         Int
  mimetype     String
  projectId    String?
  submissionId String?
  createdAt    DateTime           @default(now()) @db.Timestamp(6)
  updatedAt    DateTime           @updatedAt @db.Timestamp(6)
  project      Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submission   ProjectSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model ProjectSubmission {
  id                    String         @id @default(cuid())
  firstName             String
  lastName              String
  email                 String
  projectName           String
  patternName           String?
  designerName          String?
  patternLink           String?
  productId             String
  nameDisplayPreference String
  socialMediaHandle     String?
  status                String         @default("pending")
  submittedAt           DateTime       @default(now()) @db.Timestamp(6)
  approvedAt            DateTime?      @db.Timestamp(6)
  rejectedAt            DateTime?      @db.Timestamp(6)
  rejectionReason       String?
  createdAt             DateTime       @default(now()) @db.Timestamp(6)
  updatedAt             DateTime       @updatedAt @db.Timestamp(6)
  images                ProjectImage[]
  product               Product        @relation(fields: [productId], references: [id])
  shop                  String?
  projectDetails        String?
  categories            String[]       @default([])
  @@index([email])
  @@index([status])
  @@index([productId])
  @@index([submittedAt])
}

model Product {
  id          String              @id @default(cuid())
  shopifyId   String
  title       String
  handle      String
  description String?
  price       Float
  imageUrl    String
  selectedOption Json?
  createdAt   DateTime            @default(now()) @db.Timestamp(6)
  updatedAt   DateTime            @updatedAt @db.Timestamp(6)
  submissions ProjectSubmission[]
}

enum ProjectStatus {
  PENDING
  APPROVED  
  REJECTED
}
