// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime? @db.Timestamp
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
}

model Customer {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String
  phone       String?
  createdAt   DateTime  @default(now()) @db.Timestamp
  updatedAt   DateTime  @updatedAt @db.Timestamp
  projects    Project[]
}

model Project {
  id          String        @id @default(uuid())
  title       String
  description String
  status      ProjectStatus @default(PENDING)
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id])
  images      ProjectImage[]
  adminNotes  String?       // For admin to add notes/comments
  createdAt   DateTime      @default(now()) @db.Timestamp
  updatedAt   DateTime      @updatedAt @db.Timestamp
  approvedAt  DateTime?     @db.Timestamp // When the project was approved
  rejectedAt  DateTime?     @db.Timestamp // When the project was rejected
  approvedBy  String?       // Admin's ID who approved/rejected
}

model ProjectImage {
  id                  String    @id @default(cuid())
  url                 String
  filename            String
  size                Int
  mimetype            String
  projectId           String?
  project             Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submissionId        String?
  submission          ProjectSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  createdAt           DateTime  @default(now()) @db.Timestamp
  updatedAt           DateTime  @updatedAt @db.Timestamp
}

model ProjectSubmission {
  id                  String    @id @default(cuid())
  firstName           String
  lastName            String
  email               String
  projectName         String
  patternName         String?
  designerName        String?
  patternLink         String?
  productId           String
  nameDisplayPreference String
  socialMediaHandle   String?
  status              String    @default("pending")
  submittedAt         DateTime  @default(now()) @db.Timestamp
  approvedAt          DateTime? @db.Timestamp
  rejectedAt          DateTime? @db.Timestamp
  rejectionReason     String?
  createdAt           DateTime  @default(now()) @db.Timestamp
  updatedAt           DateTime  @updatedAt @db.Timestamp

  // Relations
  product             Product   @relation(fields: [productId], references: [id])
  images              ProjectImage[]

  @@index([email])
  @@index([status])
  @@index([productId])
  @@index([submittedAt])
}

model Product {
  id                  String    @id @default(cuid())
  title               String
  handle              String
  description         String?
  price               Float
  imageUrl            String
  submissions         ProjectSubmission[]
  createdAt           DateTime  @default(now()) @db.Timestamp
  updatedAt           DateTime  @updatedAt @db.Timestamp
}
